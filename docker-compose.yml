version: '3.8'

services:
  # COWN1 Application
  cown1-app:
    build: .
    container_name: cown1-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MYSQL_HOST=mysql
      - MYSQL_USER=cown1
      - MYSQL_PASSWORD=cown1_password
      - MYSQL_DATABASE=cown1
      - MONGODB_URI=mongodb://mongo:27017/cown1
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - JWT_EXPIRES_IN=24h
      - BCRYPT_ROUNDS=12
    depends_on:
      - mysql
      - mongo
      - redis
      - neo4j
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - cown1-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: cown1-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=cown1
      - MYSQL_USER=cown1
      - MYSQL_PASSWORD=cown1_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "3306:3306"
    restart: unless-stopped
    networks:
      - cown1-network
    command: --default-authentication-plugin=mysql_native_password

  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: cown1-mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin_password
      - MONGO_INITDB_DATABASE=cown1
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - cown1-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cown1-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - cown1-network

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.11
    container_name: cown1-neo4j
    environment:
      - NEO4J_AUTH=neo4j/neo4j_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: unless-stopped
    networks:
      - cown1-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cown1-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./static:/var/www/static:ro
    depends_on:
      - cown1-app
    restart: unless-stopped
    networks:
      - cown1-network

# Volumes
volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

# Networks
networks:
  cown1-network:
    driver: bridge
